# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html

[gcode_macro G32]
description: Clears bed mesh, homes all, QGLs, and rehomes Z
gcode:
    #STATUS_HOMING

    BED_MESH_CLEAR

    G28 ; home all

   # STATUS_LEVELING
    M118 Leveling
    QUAD_GANTRY_LEVEL

    G28 Z ; rehome z
    M118 ; clear message
    
    G0 X175 Y175 Z30 F3600
   # STATUS_READY
    



[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode: 
# Parameters
    # Parameters

    # Extruder and bed temperatures
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_extruder_temp)|float %}

    # Optional Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}

    # Heatsoak time of the bed in minutes and chamber temperature wanted
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_soak)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_chamber_temp)|int %}
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_chamber_max_heating_time)|int %}

    # Default material type to 'ABS'
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_material)|string %}

    # Get bounding box of the first layer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

    # End parameters

    # Set vars
    {% set verbose = printer["gcode_macro _USER_VARIABLES_OTHER"].verbose %}
    {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES_OTHER"].purge_bucket_xyz|map('float') %}
    
    # Set light intensity while printing
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES_OTHER"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES_OTHER"].light_intensity_printing %}
    
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES_OTHER"].purge_and_brush_enabled %}
    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES_OTHER"].chamber_temperature_sensor_enabled %}
    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES_OTHER"].zcalib_plugin_enabled %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES_OTHER"].force_homing_in_start_print %}
    
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    
    LIGHT_ON S={light_intensity_start_print}
    
    CLEAR_PAUSE
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    # homing 
    ##STATUS_HOMING
    G28 

    # Go to middle of bed
    G0 Z110 #X{max_x|int / 2} Y350F{St}

    {% if (SOAK > 0) and (printer.heater_bed.target < (BED_TEMP - 8)) %}
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if CHAMBER_TEMP > 0 %}
            START_FILTER SPEED=1
        {% endif %}
        # Put the bed temperature target and wait for the soak
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={SOAK}
    {% else %}  
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if CHAMBER_TEMP > 0 %}
            START_FILTER SPEED=1
        {% endif %}
        # Only heat the bed to the target and continue
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME=0
    {% endif %}

    # 3 ----- CHAMBER HEATSOAK ----------------------------------
    # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
    # We heat up the extruder a little bit to speed up the process by using the hotend fan. If there is one, the recirculating filter
    # is also be powered on from the previous step and kept like that to act as bed fans
    {% if chamber_sensor_enabled %}
        {% if CHAMBER_TEMP > 0 %}
            #RESPOND MSG="Warming up extruder"
           # M109  S170 #S{EXTRUDER_TEMP - 50} #set to 170 to avoid oozing in the first place
            # Wait for the temperature of the chamber to be reached (default max: 15min)
            HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}
        {% endif %}
    {% endif %}

    RESPOND MSG="Warming up extruder"
    # Heat up hot end for probing
    M109 S150

    # 4 ----- QUAD GANTRY LEVELING -----------------------------
    {% if printer.quad_gantry_level.applied|lower == 'false' or force_homing_in_start_print %}
        #STATUS_LEVELING
        {% if verbose %}
            RESPOND MSG="QGL..."
        {% endif %}
        QUAD_GANTRY_LEVEL
    {% endif %}

    #CLEAN_NOZZLE
    # perform homing after hotend heating
    G28 Z

    # Fine adjustement of z offset from the slicer profile (like when using textured/smooth pei)
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    #For PA:
    #gaps is too high
    #corner squish is too low

    # 7 ----- MATERIAL PARAMETERS --------------------------------
    # Material dependant parameters like PA, firmware retraction, Z_offset, etc...
    RESPOND MSG="Material: {MATERIAL}"
    {% if MATERIAL == "PLA" %}
        SET_PRESSURE_ADVANCE ADVANCE=0.0525
        SET_RETRACTION RETRACT_LENGTH=0.75 RETRACT_SPEED=40 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=30
    {% elif MATERIAL == "PET" %}
    #    SET_PRESSURE_ADVANCE ADVANCE=0.0650
    #    SET_GCODE_OFFSET Z_ADJUST=0.010 MOVE=1
     #   SET_RETRACTION RETRACT_LENGTH=1.4 RETRACT_SPEED=30 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=20
    {% elif MATERIAL == "ABS" %}
        SET_PRESSURE_ADVANCE ADVANCE=0.023 #0.027
        SET_RETRACTION RETRACT_LENGTH=0.4 RETRACT_SPEED=30 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=30
        {% if filter_enabled %} # if a filter is available, we start it for ABS
            START_FILTER SPEED=0.8
        {% endif %}
     {% elif MATERIAL == "ASA" %}
        SET_PRESSURE_ADVANCE ADVANCE=0.023 #0.027
        SET_RETRACTION RETRACT_LENGTH=0.4 RETRACT_SPEED=30 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=30
        {% if filter_enabled %} # if a filter is available, we start it for ABS
            START_FILTER SPEED=0.8
        {% endif %}
    {% endif %}


     # 8 ----- BED MESH -------------------------------------------
    # For the bed mesh, there is two possibilities depending if we use the auto z calibration plugin:
    #  - If yes, then the mesh should already be computed by a call to COMPUTE_MESH_PARAMETERS in section 6
    #    because we already needed to use the mesh_center point as a parameter to the z calibration command
    #  - If no, then we need to use the SIZE parameter to the ADAPTIVE_BED_MESH call to do all at once now
    #STATUS_MESHING
    {% if verbose %}
        RESPOND MSG="Bed mesh measurement..."
    {% endif %}
    
    {% if zcalib_plugin_enabled %}
        ADAPTIVE_BED_MESH
        DOCK_PROBE_UNLOCK
    {% else %}
        ADAPTIVE_BED_MESH SIZE={FL_SIZE}
    {% endif %}

        # 5 ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket
    # and wait 30s to let the nozzle dilate and stabilize
    #STATUS_HEATING

    G1 X20 Y20 Z10 F{St} # move by purge line area

    RESPOND MSG="Heating up extruder"
    M109 S{EXTRUDER_TEMP}
    G4 P{15000 * 0.5} #60000
    {% if verbose %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}

    #CLEAN_NOZZLE
  
       # 9 ----- PRINT !!! -------------------------------------------
    # Do a prime line, lower the lights and start the print
    #STATUS_PRINTING
    {% if verbose %}
        RESPOND MSG="Printing!"
    {% endif %}

    PRIME_LINE
    
    #one last time
  #  CLEAN_NOZZLE

    LIGHT_ON S={light_intensity_printing}
    
    G92 E0.0


[gcode_macro PRIME_LINE]
gcode:
    # Set vars
    {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES_OTHER"].z_drop_speed * 60 %}
    {% set prime_line_x, prime_line_y = printer["gcode_macro _USER_VARIABLES_OTHER"].prime_line_xy|map('float') %}

    G91
    M83
    G1 Z5 F{Sz}

    ; Starting position
    G90
    G1 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z0.3 F{Sz|int / 2}

    ; Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    ; Prime line
    G92 E0
    G1 Y{prime_line_y + 80} E10 F2500
    G92 E0
    G1 Y{prime_line_y + 130} E5 F1500

    ; Retract and Z-hop
    G92 E0
    G1 Z4.0 E-0.1 F{Sz}
    G92 E0
    G1 Z5 F{Sz}

[gcode_macro PRIME_LINE]
gcode:
    # Set vars
    {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES_OTHER"].z_drop_speed * 60 %}
    {% set prime_line_x, prime_line_y = printer["gcode_macro _USER_VARIABLES_OTHER"].prime_line_xy|map('float') %}

    G91
    M83
    G1 Z5 F{Sz}

    ; Starting position
    G90
    G1 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z0.3 F{Sz|int / 2}

    ; Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    ; Prime line
    G92 E0
    G1 Y{prime_line_y + 80} E10 F2500
    G92 E0
    G1 Y{prime_line_y + 130} E5 F1500

    ; Retract and Z-hop
    G92 E0
    G1 Z4.0 E-0.1 F{Sz}
    G92 E0
    G1 Z5 F{Sz}




[gcode_macro PRINT_END]
description: Stop the print and filter the atmosphere for 10min before shuting down
gcode:
    {% set disable_motors_in_end_print = printer["gcode_macro _USER_VARIABLES_OTHER"].disable_motors_in_end_print %}
    {% set light_intensity_end_print = printer["gcode_macro _USER_VARIABLES_OTHER"].light_intensity_end_print %}

    

    PARK
    _TIP_SHAPING
    G1 E-7 F2100
    
    TURN_OFF_HEATERS
    M107
    M400
    BED_MESH_CLEAR

   # SONG_TAKEONME

    # If a filter is connected, filter the air at full power
    # for a couple of min before stopping everything
    {% set FILTER_TIME = params.FILTER_TIME|default(10)|int %}
    START_FILTER SPEED=1
    UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION={FILTER_TIME}

    LIGHT_ON S={light_intensity_end_print}
    #STATUS_OFF

    {% if disable_motors_in_end_print %}
        M84
    {% endif %}	






#Conditional QGL: If QGL'd already, will not run again
[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        
    {% endif %}



[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the print and park
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    LIGHT_ON


[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90

[gcode_macro LOAD_FILAMENT]
gcode:
      M117 LOADING...
      G91 #relative
      G1 E99.9 F2000 #extrude 100mm
      G1 E435 F2500
      G4 P900
      G1 E45.0 F250
      G90 #absolute

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(5000) %}
    G91
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92 E0

[gcode_macro RESUME_MACRO]
gcode:
      M117 RESUMING...
      RESUME


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.



[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Cancel the print, retract 10mm of filament and park
gcode:
    PARK
    _TIP_SHAPING
    G1 E-7 F2100
    
    TURN_OFF_HEATERS
    M107
    M400

    CLEAR_PAUSE
    BED_MESH_CLEAR
    SDCARD_RESET_FILE
    
    STOP_FILTER
    LIGHT_OFF
   # STATUS_OFF
    BASE_CANCEL_PRINT

    
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro PARK]
description: Park the toolhead at the back and retract some filament if the nozzle is hot
gcode:
    {% set E = params.E|default(1.7)|float %}

    {% set Px, Py = printer["gcode_macro _USER_VARIABLES_OTHER"].park_position_xy|map('float') %}
    {% set park_lift_z = printer["gcode_macro _USER_VARIABLES_OTHER"].park_lift_z %}

    {% set St = printer["gcode_macro _USER_VARIABLES_OTHER"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES_OTHER"].z_drop_speed * 60 %}

    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% set z_safe = act_z + park_lift_z %}
    {% if z_safe > max_z %}
        {% set z_safe = max_z %}
    {% endif %}

   # retract filament before move up toolhead
    {% if printer.extruder.temperature > 185 %}
      G10
    {% endif %}

    G90
    G1 Z{z_safe} F{Sz}

    G0 X{Px} Y{Py} F{St}


# LEDs

[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 1.0, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

# #########################################################################################################################
# ###inputshaper macros:
 
# [gcode_macro ADXL_X]
# description: test resonances in x direction / of the hotend
# gcode:
#   M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
#   home_check		#or g28 if you dont have a macro to check if you orinter is homed
#   SHAPER_CALIBRATE AXIS=x
#   RUN_SHELL_COMMAND CMD=adxl_x
#   M118 Test done
#   SAVE_CONFIG
 
# [gcode_macro ADXL_Y]
# description: test resonances in y direction / of the heated bed
# gcode:
#   M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
#   home_check  		#or g28
#   SHAPER_CALIBRATE AXIS=y
#   RUN_SHELL_COMMAND CMD=adxl_y
#   M118 Test done
#   SAVE_CONFIG
 
# #########################################################################################################################
# ###shell commands:
 
# ### create a file named: adxl_x.sh
# ~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_x_*.csv -o ~/klipper_config/shaper_calibrate_x.png
 
# ### create a file named: adxl_y.sh
# ~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_y_*.csv -o ~/klipper_config/shaper_calibrate_y.png
 
# #########################################################################################################################
# ###shell commands to run in klipper:
 
# [gcode_shell_command adxl_x]
# command: sh /home/pi/klipper_config/macro/shell_commands/adxl_x.sh	
# # edit: ´klipper_config/macro/shell_commands/´ to where your .sh file lays
 
# timeout: 60.
# verbose: True
 
# [gcode_shell_command adxl_y]
# command: sh /home/pi/klipper_config/macro/shell_commands/adxl_y.sh		
# # edit: ´klipper_config/macro/shell_commands/´ to where your .sh file lays
# timeout: 60.
# verbose: True