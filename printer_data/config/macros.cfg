# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR

    G28
    CQGL #Conditional QUAD_GANTRY_LEVEL
    G28 Z
   #park center of bed 175,175
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
   
    G32                            ; home all axes

    SET_LED_EFFECT effect=led_ready stop=1
    SET_LED_EFFECT effect=led_nozzle_initial
    SET_LED_EFFECT effect=led_ready

    G92 E0                         ; zero the extruder
    G1 E-3 F1800                ; retract filament
    BED_MESH_PROFILE LOAD=default

    

   PLAY_SINGLE_FEEDBACK_SOUND

    SET_LED_EFFECT effect=led_clean

    CLEAN_NOZZLE

    SET_LED_EFFECT effect=led_clean stop=1
    SET_LED_EFFECT effect=led_calibration_z

    CALIBRATE_Z

    SET_LED_EFFECT effect=led_calibration_z stop=1 # Stop
    SET_LED_EFFECT effect=led_ready # Start led_ready

    G1 Z20 F3000                   ; move nozzle away from bed 

    PLAY_DOUBLE_FEEDBACK_SOUND



    SET_LED_EFFECT effect=led_ready stop=1
    SET_LED_EFFECT effect=led_nozzle_static
    SET_LED_EFFECT effect=led_start_print

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
      SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5 F1800                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X340 Y340 F3600            ; park nozzle at rear
    BED_MESH_CLEAR

    PLAY_LONG_FEEDBACK_SOUND

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
   # STATUS_BUSY




#Conditional QGL: If QGL'd already, will not run again
[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        
    {% endif %}


[gcode_macro PAUSE_MACRO]
gcode:
      PLAY_LONG_FEEDBACK_SOUND
      M5
      PAUSE
      #PARK_MACRO
      #SET_IDLE_TIMEOUT TIMEOUT=7200 #should turn off motors after a specific time limit

[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90

[gcode_macro LOAD_FILAMENT]
gcode:
      M117 LOADING...
      G91 #relative
      G1 E99.9 F2000 #extrude 100mm
      G1 E435 F2500
      G4 P900
      G1 E45.0 F250
      G90 #absolute

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(5000) %}
    G91
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92 E0

[gcode_macro RESUME_MACRO]
gcode:
      M117 RESUMING...
      RESUME
      SOUND_YES

#[gcode_macro M300]
#gcode:
#    SET_PIN PIN=BEEPER_pin VALUE={params.S|default(100)|int}
#    G4 P{params.P|default(1000)|int}
#    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro M300]
variable_silenced: 0
variable_loud: 2000 #200
gcode:
    #{ action_respond_info("DEBUG M300") }
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    {% set quiet = params.QUIET|default(0)|int %}
    {% set V = params.V|default(loud)|int %}
    
    #{ action_respond_info("V is:") }
    #{ action_respond_info(V|string) }
    {% if ((quiet ) > 0 ) %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=silenced VALUE=1
        { action_respond_info("Beeper Silenced") }
    {% elif (quiet) < 0 %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=silenced VALUE=0
        { action_respond_info("Beeper Enabled") }
    {% endif %}

    {% if (V < 50) %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=silenced VALUE=1
        { action_respond_info("Beeper Silenced on V < 50") }
    {% elif (V > 200) %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=loud VALUE=200
        {% set V = 200|int %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=loud VALUE={V}
    {% endif %}

    {% if printer["gcode_macro M300"].silenced < 1 %}
        ##{ action_respond_info("V, " +  (V|float)|string + "CYCLE_TIME " + (1.0/S)|string ) } #debug
        SET_PIN PIN=beeper VALUE={V|float}  CYCLE_TIME={ 1.0/S if S > 0 else 1 }
        G4 P{P}
        SET_PIN PIN=beeper VALUE=0
    {% else %}
        { action_respond_info("SILENT BEEP") }
    {% endif %}

[gcode_macro ALARM_BEEP]
description: Get some serious attention with M300
gcode:
   # {% if printer["gcode_macro M301.1"] %}
        _SOUND_ALARM
    #% else %}
    #    M300 V 255
    #    G4 P 50
    #    M300 V 255
    #    G4 P 50
    #    M300 V 255
     #   G4 P 50
    #    M300 V 255
     #   G4 P 50
     #   M300 V 255
     #   G4 P 50
     #   M300 V 255
     #   G4 P 50
   # {% endif %}


[gcode_macro M300.1]
variable_tempo: 120
#variable_octave: 3
variable_legato: 0.9
gcode:
    {% set c_freq = 261.63 %}
    {% set db_freq = 277.18 %}
    {% set d_freq = 293.66 %}
    {% set eb_freq = 311.13 %}
    {% set e_freq = 329.63 %}
    {% set f_freq = 349.23 %}
    {% set gb_freq = 369.99 %}
    {% set g_freq = 392 %}
    {% set ab_freq = 415.30 %}
    {% set a_freq = 440 %}     
    {% set bb_freq = 466.16 %}
    {% set b_freq = 493.88 %}

    {% set C =  params.C|default(0)|int %}
    {% set DB = params.DB|default(0)|int %}
    {% set D = params.D|default(0)|int %}
    {% set EB = params.EB|default(0)|int %}
    {% set E = params.E|default(0)|int %}
    {% set F = params.F|default(0)|int %}
    {% set GB = params.GB|default(0)|int %}
    {% set G = params.G|default(0)|int %}
    {% set AB = params.AB|default(0)|int %}
    {% set A = params.A|default(0)|int %}
    {% set BB = params.BB|default(0)|int %}
    {% set B = params.B|default(0)|int %}

    # L4 is a quarter/quaver L1 is a semibreve
    # L6 is a dotted quaver
    # L12 is a dotted semiquver
    {% set note_len = params.L|default(4.0)|float %}
    {% set P = params.P|default(-1)|int %}

    
    {% set len = (60000.0/printer["gcode_macro M300.1"].tempo) * (1.0/note_len) %}
    {% set legato = printer["gcode_macro M300.1"].legato|float %}


    {% if (C > 0) %}
        M300 S{c_freq * (2 ** (C-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (DB > 0) %}
        M300 S{db_freq * (2 ** (DB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (D > 0) %}
        M300 S{d_freq * (2 ** (D-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (EB > 0) %}
        M300 S{eb_freq * (2 ** (EB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (E > 0) %}
        M300 S{e_freq * (2 ** (E-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (F > 0) %}
        M300 S{f_freq * (2 ** (F-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (GB > 0) %}
        M300 S{gb_freq * (2 ** (GB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (G > 0) %}
        M300 S{g_freq * (2 ** (G-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (AB > 0) %}
        M300 S{ab_freq * (2 ** (AB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (A > 0) %}
        M300 S{a_freq * (2 ** (A-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (BB > 0) %}
        M300 S{bb_freq * (2 ** (BB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (B > 0) %}
        M300 S{b_freq * (2 ** (B-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% endif %}

    {% if (P > 0) %}
        G4 P{(60000.0/printer["gcode_macro M300.1"].tempo) * (1.0/P)}
    {% endif %}


[gcode_macro SOUND_YES]
gcode:
    {% if printer["gcode_macro M300.1"] %}
        M300.1 C4 L4
        M300.1 C4 L4
        M300.1 G4 L1
    {% elif printer["gcode_macro M300"] %}
        M300
    {% else %}
        { action_respond_info("BEEP!")}
    {% endif %}

[gcode_macro SOUND_NO]
gcode:
    {% if printer["gcode_macro M300.1"] %}
        M300.1 A3
        M300.1 C4 L4
        M300.1 A3 L4
        M300.1 C4 L4
    {% elif printer["gcode_macro M300"] %}
        M300 P50
        G4 P40
        M300 P100
    {% else %}
        { action_respond_info("BEEP!")}
    {% endif %}

[gcode_macro _SOUND_ALARM]
gcode:
    {% if printer["gcode_macro M300.1"] %}
        M300.1 C4 L1
        M300.1 C4 L2
        M300.1 C4 L4 P4 
    
        M300.1 B4 L4
        M300.1 AB4 L4
        M300.1 F4 L4
        M300.1 AB L4
        M300.1 B4 L4
        M300.1 AB4 L4
        M300.1 F4 L4
        M300.1 AB L4

        M300.1 B4 L4
        M300.1 F4 L4
        M300.1 D4 L2

        M300.1 B4 L4
        M300.1 F4 L4
        M300.1 D4 L2

        M300.1 B3 L4
        M300.1 B3 L1.5

    {% elif printer["gcode_macro M300"] %}
         M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
    {% else %}
        { action_respond_info("BEEP! Something Alarming happened")}
    {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.



[gcode_macro M600]
gcode:
    ALARM_BEEP
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    

		


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    PLAY_LONG_FEEDBACK_SOUND
    SOUND_NO

[gcode_macro PLAY_SINGLE_FEEDBACK_SOUND]
gcode:
    M300 S1000 P1000
    M300 S10 P1000

[gcode_macro PLAY_DOUBLE_FEEDBACK_SOUND]
gcode:
    M300 S1000 P1000
    M300 S10 P1000
    M300 S1000 P1000
    M300 S10 P1000

[gcode_macro PLAY_LONG_FEEDBACK_SOUND]
gcode:
    M300 S1000 P2000
    M300 S10 P2000


[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

# description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

        # Save current gcode state (absolute/relative, etc)
        SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR

    G28
    CQGL #Conditional QUAD_GANTRY_LEVEL
    G28 Z
   #park center of bed 175,175
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
   
    G32                            ; home all axes

    SET_LED_EFFECT effect=led_ready stop=1
    SET_LED_EFFECT effect=led_nozzle_initial
    SET_LED_EFFECT effect=led_ready

    G92 E0                         ; zero the extruder
    G1 E-3 F1800                ; retract filament
    BED_MESH_PROFILE LOAD=default

    

   PLAY_SINGLE_FEEDBACK_SOUND

    SET_LED_EFFECT effect=led_clean

    CLEAN_NOZZLE

    SET_LED_EFFECT effect=led_clean stop=1
    SET_LED_EFFECT effect=led_calibration_z

    CALIBRATE_Z

    SET_LED_EFFECT effect=led_calibration_z stop=1 # Stop
    SET_LED_EFFECT effect=led_ready # Start led_ready

    G1 Z20 F3000                   ; move nozzle away from bed 

    PLAY_DOUBLE_FEEDBACK_SOUND



    SET_LED_EFFECT effect=led_ready stop=1
    SET_LED_EFFECT effect=led_nozzle_static
    SET_LED_EFFECT effect=led_start_print

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5 F1800                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X340 Y340 F3600            ; park nozzle at rear
    BED_MESH_CLEAR

    PLAY_LONG_FEEDBACK_SOUND

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
   # STATUS_BUSY




#Conditional QGL: If QGL'd already, will not run again
[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        
    {% endif %}


[gcode_macro PAUSE_MACRO]
gcode:
      PLAY_LONG_FEEDBACK_SOUND
      M5
      PAUSE
      #PARK_MACRO
      #SET_IDLE_TIMEOUT TIMEOUT=7200 #should turn off motors after a specific time limit

[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90

[gcode_macro LOAD_FILAMENT]
gcode:
      M117 LOADING...
      G91 #relative
      G1 E99.9 F2000 #extrude 100mm
      G1 E435 F2500
      G4 P900
      G1 E45.0 F250
      G90 #absolute

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(5000) %}
    G91
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92 E0

[gcode_macro RESUME_MACRO]
gcode:
      M117 RESUMING...
      RESUME
      SOUND_YES

#[gcode_macro M300]
#gcode:
#    SET_PIN PIN=BEEPER_pin VALUE={params.S|default(100)|int}
#    G4 P{params.P|default(1000)|int}
#    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro M300]
variable_silenced: 0
variable_loud: 2000 #200
gcode:
    #{ action_respond_info("DEBUG M300") }
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    {% set quiet = params.QUIET|default(0)|int %}
    {% set V = params.V|default(loud)|int %}
    
    #{ action_respond_info("V is:") }
    #{ action_respond_info(V|string) }
    {% if ((quiet ) > 0 ) %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=silenced VALUE=1
        { action_respond_info("Beeper Silenced") }
    {% elif (quiet) < 0 %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=silenced VALUE=0
        { action_respond_info("Beeper Enabled") }
    {% endif %}

    {% if (V < 50) %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=silenced VALUE=1
        { action_respond_info("Beeper Silenced on V < 50") }
    {% elif (V > 200) %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=loud VALUE=200
        {% set V = 200|int %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=M300 VARIABLE=loud VALUE={V}
    {% endif %}

    {% if printer["gcode_macro M300"].silenced < 1 %}
        ##{ action_respond_info("V, " +  (V|float)|string + "CYCLE_TIME " + (1.0/S)|string ) } #debug
        SET_PIN PIN=beeper VALUE={V|float}  CYCLE_TIME={ 1.0/S if S > 0 else 1 }
        G4 P{P}
        SET_PIN PIN=beeper VALUE=0
    {% else %}
        { action_respond_info("SILENT BEEP") }
    {% endif %}

[gcode_macro ALARM_BEEP]
description: Get some serious attention with M300
gcode:
   # {% if printer["gcode_macro M301.1"] %}
        _SOUND_ALARM
    #% else %}
    #    M300 V 255
    #    G4 P 50
    #    M300 V 255
    #    G4 P 50
    #    M300 V 255
     #   G4 P 50
    #    M300 V 255
     #   G4 P 50
     #   M300 V 255
     #   G4 P 50
     #   M300 V 255
     #   G4 P 50
   # {% endif %}


[gcode_macro M300.1]
variable_tempo: 120
#variable_octave: 3
variable_legato: 0.9
gcode:
    {% set c_freq = 261.63 %}
    {% set db_freq = 277.18 %}
    {% set d_freq = 293.66 %}
    {% set eb_freq = 311.13 %}
    {% set e_freq = 329.63 %}
    {% set f_freq = 349.23 %}
    {% set gb_freq = 369.99 %}
    {% set g_freq = 392 %}
    {% set ab_freq = 415.30 %}
    {% set a_freq = 440 %}     
    {% set bb_freq = 466.16 %}
    {% set b_freq = 493.88 %}

    {% set C =  params.C|default(0)|int %}
    {% set DB = params.DB|default(0)|int %}
    {% set D = params.D|default(0)|int %}
    {% set EB = params.EB|default(0)|int %}
    {% set E = params.E|default(0)|int %}
    {% set F = params.F|default(0)|int %}
    {% set GB = params.GB|default(0)|int %}
    {% set G = params.G|default(0)|int %}
    {% set AB = params.AB|default(0)|int %}
    {% set A = params.A|default(0)|int %}
    {% set BB = params.BB|default(0)|int %}
    {% set B = params.B|default(0)|int %}

    # L4 is a quarter/quaver L1 is a semibreve
    # L6 is a dotted quaver
    # L12 is a dotted semiquver
    {% set note_len = params.L|default(4.0)|float %}
    {% set P = params.P|default(-1)|int %}

    
    {% set len = (60000.0/printer["gcode_macro M300.1"].tempo) * (1.0/note_len) %}
    {% set legato = printer["gcode_macro M300.1"].legato|float %}


    {% if (C > 0) %}
        M300 S{c_freq * (2 ** (C-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (DB > 0) %}
        M300 S{db_freq * (2 ** (DB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (D > 0) %}
        M300 S{d_freq * (2 ** (D-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (EB > 0) %}
        M300 S{eb_freq * (2 ** (EB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (E > 0) %}
        M300 S{e_freq * (2 ** (E-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (F > 0) %}
        M300 S{f_freq * (2 ** (F-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (GB > 0) %}
        M300 S{gb_freq * (2 ** (GB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (G > 0) %}
        M300 S{g_freq * (2 ** (G-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (AB > 0) %}
        M300 S{ab_freq * (2 ** (AB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (A > 0) %}
        M300 S{a_freq * (2 ** (A-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (BB > 0) %}
        M300 S{bb_freq * (2 ** (BB-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% elif (B > 0) %}
        M300 S{b_freq * (2 ** (B-3))} P{len * legato}
        G4 P{len * (1-legato)}
    {% endif %}

    {% if (P > 0) %}
        G4 P{(60000.0/printer["gcode_macro M300.1"].tempo) * (1.0/P)}
    {% endif %}


[gcode_macro SOUND_YES]
gcode:
    {% if printer["gcode_macro M300.1"] %}
        M300.1 C4 L4
        M300.1 C4 L4
        M300.1 G4 L1
    {% elif printer["gcode_macro M300"] %}
        M300
    {% else %}
        { action_respond_info("BEEP!")}
    {% endif %}

[gcode_macro SOUND_NO]
gcode:
    {% if printer["gcode_macro M300.1"] %}
        M300.1 A3
        M300.1 C4 L4
        M300.1 A3 L4
        M300.1 C4 L4
    {% elif printer["gcode_macro M300"] %}
        M300 P50
        G4 P40
        M300 P100
    {% else %}
        { action_respond_info("BEEP!")}
    {% endif %}

[gcode_macro _SOUND_ALARM]
gcode:
    {% if printer["gcode_macro M300.1"] %}
        M300.1 C4 L1
        M300.1 C4 L2
        M300.1 C4 L4 P4 
    
        M300.1 B4 L4
        M300.1 AB4 L4
        M300.1 F4 L4
        M300.1 AB L4
        M300.1 B4 L4
        M300.1 AB4 L4
        M300.1 F4 L4
        M300.1 AB L4

        M300.1 B4 L4
        M300.1 F4 L4
        M300.1 D4 L2

        M300.1 B4 L4
        M300.1 F4 L4
        M300.1 D4 L2

        M300.1 B3 L4
        M300.1 B3 L1.5

    {% elif printer["gcode_macro M300"] %}
         M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
        M300 V 255
        G4 P 50
    {% else %}
        { action_respond_info("BEEP! Something Alarming happened")}
    {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.



[gcode_macro M600]
gcode:
    ALARM_BEEP
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    

		


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    PLAY_LONG_FEEDBACK_SOUND
    SOUND_NO

[gcode_macro PLAY_SINGLE_FEEDBACK_SOUND]
gcode:
    M300 S1000 P1000
    M300 S10 P1000

[gcode_macro PLAY_DOUBLE_FEEDBACK_SOUND]
gcode:
    M300 S1000 P1000
    M300 S10 P1000
    M300 S1000 P1000
    M300 S10 P1000

[gcode_macro PLAY_LONG_FEEDBACK_SOUND]
gcode:
    M300 S1000 P2000
    M300 S10 P2000


[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    

# LEDs

[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 1.0, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on